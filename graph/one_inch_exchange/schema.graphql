# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    subscription: Subscription
}

type Query {
    "Access to subgraph metadata"
    _meta(block: Block_height): _Meta_
    referralFee(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): ReferralFee
    referralFees(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: ReferralFee_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: ReferralFee_filter
    ): [ReferralFee!]!
    swap(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): Swap
    swaps(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Swap_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: Swap_filter
    ): [Swap!]!
    token(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): Token
    tokens(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Token_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: Token_filter
    ): [Token!]!
    tradingPair(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): TradingPair
    tradingPairs(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: TradingPair_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: TradingPair_filter
    ): [TradingPair!]!
    user(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): User
    users(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: User_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: User_filter
    ): [User!]!
}

type ReferralFee {
    amount: BigInt!
    contract: Bytes
    id: ID!
    receiver: Bytes!
    timestamp: BigInt!
    token: Token!
}

type Subscription {
    "Access to subgraph metadata"
    _meta(block: Block_height): _Meta_
    referralFee(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): ReferralFee
    referralFees(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: ReferralFee_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: ReferralFee_filter
    ): [ReferralFee!]!
    swap(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): Swap
    swaps(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Swap_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: Swap_filter
    ): [Swap!]!
    token(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): Token
    tokens(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Token_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: Token_filter
    ): [Token!]!
    tradingPair(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): TradingPair
    tradingPairs(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: TradingPair_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: TradingPair_filter
    ): [TradingPair!]!
    user(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): User
    users(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: User_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: User_filter
    ): [User!]!
}

type Swap {
    blockNumber: BigInt!
    contract: Bytes!
    fromAmount: BigInt!
    gasPrice: BigInt!
    gasUsed: BigInt!
    id: ID!
    pair: TradingPair!
    referrer: Bytes!
    referrerFee: BigInt!
    sender: User!
    timestamp: BigInt!
    toAmount: BigInt!
}

type Token {
    decimals: Int!
    id: ID!
    name: String!
    symbol: String!
    tradeCount: BigInt!
    tradeVolume: BigDecimal!
}

type TradingPair {
    fromToken: Token!
    id: ID!
    toToken: Token!
    tradeCount: BigInt!
    tradeVolume: BigDecimal!
}

type User {
    id: ID!
    tradeCount: BigInt!
    trades(first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Swap_filter): [Swap!]
}

type _Block_ {
    "The hash of the block"
    hash: Bytes
    "The block number"
    number: Int!
}

"The type for the top-level _meta field"
type _Meta_ {
    """

    Information about a specific subgraph block. The hash of the block
    will be null if the _meta field has a block constraint that asks for
    a block number. It will be filled if the _meta field has no block constraint
    and therefore asks for the latest  block
    """
    block: _Block_!
    "The deployment ID"
    deployment: String!
}

enum OrderDirection {
    asc
    desc
}

enum ReferralFee_orderBy {
    amount
    contract
    id
    receiver
    timestamp
    token
}

enum Swap_orderBy {
    blockNumber
    contract
    fromAmount
    gasPrice
    gasUsed
    id
    pair
    referrer
    referrerFee
    sender
    timestamp
    toAmount
}

enum Token_orderBy {
    decimals
    id
    name
    symbol
    tradeCount
    tradeVolume
}

enum TradingPair_orderBy {
    fromToken
    id
    toToken
    tradeCount
    tradeVolume
}

enum User_orderBy {
    id
    tradeCount
    trades
}

input Block_height {
    hash: Bytes
    number: Int
}

input ReferralFee_filter {
    amount: BigInt
    amount_gt: BigInt
    amount_gte: BigInt
    amount_in: [BigInt!]
    amount_lt: BigInt
    amount_lte: BigInt
    amount_not: BigInt
    amount_not_in: [BigInt!]
    contract: Bytes
    contract_contains: Bytes
    contract_in: [Bytes!]
    contract_not: Bytes
    contract_not_contains: Bytes
    contract_not_in: [Bytes!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    receiver: Bytes
    receiver_contains: Bytes
    receiver_in: [Bytes!]
    receiver_not: Bytes
    receiver_not_contains: Bytes
    receiver_not_in: [Bytes!]
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
    token: String
    token_contains: String
    token_ends_with: String
    token_gt: String
    token_gte: String
    token_in: [String!]
    token_lt: String
    token_lte: String
    token_not: String
    token_not_contains: String
    token_not_ends_with: String
    token_not_in: [String!]
    token_not_starts_with: String
    token_starts_with: String
}

input Swap_filter {
    blockNumber: BigInt
    blockNumber_gt: BigInt
    blockNumber_gte: BigInt
    blockNumber_in: [BigInt!]
    blockNumber_lt: BigInt
    blockNumber_lte: BigInt
    blockNumber_not: BigInt
    blockNumber_not_in: [BigInt!]
    contract: Bytes
    contract_contains: Bytes
    contract_in: [Bytes!]
    contract_not: Bytes
    contract_not_contains: Bytes
    contract_not_in: [Bytes!]
    fromAmount: BigInt
    fromAmount_gt: BigInt
    fromAmount_gte: BigInt
    fromAmount_in: [BigInt!]
    fromAmount_lt: BigInt
    fromAmount_lte: BigInt
    fromAmount_not: BigInt
    fromAmount_not_in: [BigInt!]
    gasPrice: BigInt
    gasPrice_gt: BigInt
    gasPrice_gte: BigInt
    gasPrice_in: [BigInt!]
    gasPrice_lt: BigInt
    gasPrice_lte: BigInt
    gasPrice_not: BigInt
    gasPrice_not_in: [BigInt!]
    gasUsed: BigInt
    gasUsed_gt: BigInt
    gasUsed_gte: BigInt
    gasUsed_in: [BigInt!]
    gasUsed_lt: BigInt
    gasUsed_lte: BigInt
    gasUsed_not: BigInt
    gasUsed_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    pair: String
    pair_contains: String
    pair_ends_with: String
    pair_gt: String
    pair_gte: String
    pair_in: [String!]
    pair_lt: String
    pair_lte: String
    pair_not: String
    pair_not_contains: String
    pair_not_ends_with: String
    pair_not_in: [String!]
    pair_not_starts_with: String
    pair_starts_with: String
    referrer: Bytes
    referrerFee: BigInt
    referrerFee_gt: BigInt
    referrerFee_gte: BigInt
    referrerFee_in: [BigInt!]
    referrerFee_lt: BigInt
    referrerFee_lte: BigInt
    referrerFee_not: BigInt
    referrerFee_not_in: [BigInt!]
    referrer_contains: Bytes
    referrer_in: [Bytes!]
    referrer_not: Bytes
    referrer_not_contains: Bytes
    referrer_not_in: [Bytes!]
    sender: String
    sender_contains: String
    sender_ends_with: String
    sender_gt: String
    sender_gte: String
    sender_in: [String!]
    sender_lt: String
    sender_lte: String
    sender_not: String
    sender_not_contains: String
    sender_not_ends_with: String
    sender_not_in: [String!]
    sender_not_starts_with: String
    sender_starts_with: String
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
    toAmount: BigInt
    toAmount_gt: BigInt
    toAmount_gte: BigInt
    toAmount_in: [BigInt!]
    toAmount_lt: BigInt
    toAmount_lte: BigInt
    toAmount_not: BigInt
    toAmount_not_in: [BigInt!]
}

input Token_filter {
    decimals: Int
    decimals_gt: Int
    decimals_gte: Int
    decimals_in: [Int!]
    decimals_lt: Int
    decimals_lte: Int
    decimals_not: Int
    decimals_not_in: [Int!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    name: String
    name_contains: String
    name_ends_with: String
    name_gt: String
    name_gte: String
    name_in: [String!]
    name_lt: String
    name_lte: String
    name_not: String
    name_not_contains: String
    name_not_ends_with: String
    name_not_in: [String!]
    name_not_starts_with: String
    name_starts_with: String
    symbol: String
    symbol_contains: String
    symbol_ends_with: String
    symbol_gt: String
    symbol_gte: String
    symbol_in: [String!]
    symbol_lt: String
    symbol_lte: String
    symbol_not: String
    symbol_not_contains: String
    symbol_not_ends_with: String
    symbol_not_in: [String!]
    symbol_not_starts_with: String
    symbol_starts_with: String
    tradeCount: BigInt
    tradeCount_gt: BigInt
    tradeCount_gte: BigInt
    tradeCount_in: [BigInt!]
    tradeCount_lt: BigInt
    tradeCount_lte: BigInt
    tradeCount_not: BigInt
    tradeCount_not_in: [BigInt!]
    tradeVolume: BigDecimal
    tradeVolume_gt: BigDecimal
    tradeVolume_gte: BigDecimal
    tradeVolume_in: [BigDecimal!]
    tradeVolume_lt: BigDecimal
    tradeVolume_lte: BigDecimal
    tradeVolume_not: BigDecimal
    tradeVolume_not_in: [BigDecimal!]
}

input TradingPair_filter {
    fromToken: String
    fromToken_contains: String
    fromToken_ends_with: String
    fromToken_gt: String
    fromToken_gte: String
    fromToken_in: [String!]
    fromToken_lt: String
    fromToken_lte: String
    fromToken_not: String
    fromToken_not_contains: String
    fromToken_not_ends_with: String
    fromToken_not_in: [String!]
    fromToken_not_starts_with: String
    fromToken_starts_with: String
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    toToken: String
    toToken_contains: String
    toToken_ends_with: String
    toToken_gt: String
    toToken_gte: String
    toToken_in: [String!]
    toToken_lt: String
    toToken_lte: String
    toToken_not: String
    toToken_not_contains: String
    toToken_not_ends_with: String
    toToken_not_in: [String!]
    toToken_not_starts_with: String
    toToken_starts_with: String
    tradeCount: BigInt
    tradeCount_gt: BigInt
    tradeCount_gte: BigInt
    tradeCount_in: [BigInt!]
    tradeCount_lt: BigInt
    tradeCount_lte: BigInt
    tradeCount_not: BigInt
    tradeCount_not_in: [BigInt!]
    tradeVolume: BigDecimal
    tradeVolume_gt: BigDecimal
    tradeVolume_gte: BigDecimal
    tradeVolume_in: [BigDecimal!]
    tradeVolume_lt: BigDecimal
    tradeVolume_lte: BigDecimal
    tradeVolume_not: BigDecimal
    tradeVolume_not_in: [BigDecimal!]
}

input User_filter {
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    tradeCount: BigInt
    tradeCount_gt: BigInt
    tradeCount_gte: BigInt
    tradeCount_in: [BigInt!]
    tradeCount_lt: BigInt
    tradeCount_lte: BigInt
    tradeCount_not: BigInt
    tradeCount_not_in: [BigInt!]
}


scalar BigDecimal

scalar BigInt

scalar Bytes
