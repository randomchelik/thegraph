# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    subscription: Subscription
}

type AggregatorAnswer {
    aggregator: Bytes!
    block: BigInt!
    currencyKey: Bytes!
    id: ID!
    rate: BigInt!
    roundId: BigInt!
    synth: String!
    timestamp: BigInt!
}

type DailyExchangePartner {
    " a string id representing the day "
    dayID: String!
    " Day timestamp + tracking code of the partner "
    id: ID!
    " Tracking code of the partner "
    partner: String!
    " Total number of trades from the volume partner for this day "
    trades: BigInt!
    " Total fees generated by the volume partner for this day "
    usdFees: BigDecimal!
    " Total transaction volume in USD for the partner on this day "
    usdVolume: BigDecimal!
}

type DailySNXPrice {
    averagePrice: BigInt!
    count: BigInt!
    id: ID!
}

type ExchangeEntryAppended {
    account: Bytes!
    amount: BigInt!
    amountReceived: BigInt!
    dest: Bytes!
    exchangeFeeRate: BigInt!
    id: ID!
    roundIdForDest: BigInt!
    roundIdForSrc: BigInt!
    src: Bytes!
}

type ExchangeEntrySettled {
    amount: BigInt!
    dest: Bytes!
    destRoundIdAtPeriodEnd: BigInt!
    exchangeTimestamp: BigInt!
    from: Bytes!
    id: ID!
    rebate: BigInt!
    reclaim: BigInt!
    src: Bytes!
    srcRoundIdAtPeriodEnd: BigInt!
}

type ExchangePartner {
    " Tracking code of the partner "
    id: ID!
    " Total number of trades from the volume partner "
    trades: BigInt!
    " Total fees generated by the volume partner "
    usdFees: BigDecimal!
    " Total transaction volume in USD for the partner "
    usdVolume: BigDecimal!
}

type FifteenMinuteSNXPrice {
    averagePrice: BigInt!
    count: BigInt!
    id: ID!
}

type LatestRate {
    " Name of synth. E.g. sUSD "
    id: ID!
    " Synth USD rate with 18 decimals "
    rate: BigInt!
}

type Query {
    "Access to subgraph metadata"
    _meta(block: Block_height): _Meta_
    aggregatorAnswer(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): AggregatorAnswer
    aggregatorAnswers(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: AggregatorAnswer_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: AggregatorAnswer_filter
    ): [AggregatorAnswer!]!
    dailyExchangePartner(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): DailyExchangePartner
    dailyExchangePartners(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: DailyExchangePartner_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: DailyExchangePartner_filter
    ): [DailyExchangePartner!]!
    dailySNXPrice(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): DailySNXPrice
    dailySNXPrices(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: DailySNXPrice_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: DailySNXPrice_filter
    ): [DailySNXPrice!]!
    exchangeEntryAppended(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): ExchangeEntryAppended
    exchangeEntryAppendeds(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: ExchangeEntryAppended_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: ExchangeEntryAppended_filter
    ): [ExchangeEntryAppended!]!
    exchangeEntrySettled(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): ExchangeEntrySettled
    exchangeEntrySettleds(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: ExchangeEntrySettled_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: ExchangeEntrySettled_filter
    ): [ExchangeEntrySettled!]!
    exchangePartner(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): ExchangePartner
    exchangePartners(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: ExchangePartner_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: ExchangePartner_filter
    ): [ExchangePartner!]!
    fifteenMinuteSNXPrice(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): FifteenMinuteSNXPrice
    fifteenMinuteSNXPrices(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: FifteenMinuteSNXPrice_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: FifteenMinuteSNXPrice_filter
    ): [FifteenMinuteSNXPrice!]!
    latestRate(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): LatestRate
    latestRates(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: LatestRate_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: LatestRate_filter
    ): [LatestRate!]!
    rateUpdate(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): RateUpdate
    rateUpdates(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: RateUpdate_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: RateUpdate_filter
    ): [RateUpdate!]!
    ratesUpdated(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): RatesUpdated
    ratesUpdateds(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: RatesUpdated_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: RatesUpdated_filter
    ): [RatesUpdated!]!
    temporaryExchangePartnerTracker(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): TemporaryExchangePartnerTracker
    temporaryExchangePartnerTrackers(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: TemporaryExchangePartnerTracker_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: TemporaryExchangePartnerTracker_filter
    ): [TemporaryExchangePartnerTracker!]!
}

type RateUpdate {
    block: BigInt!
    currencyKey: Bytes!
    id: ID!
    rate: BigInt!
    synth: String!
    timestamp: BigInt!
}

type RatesUpdated {
    block: BigInt!
    currencyKeys: [Bytes!]!
    from: Bytes!
    gasPrice: BigInt!
    id: ID!
    newRates: [BigInt!]!
    timestamp: BigInt!
}

type Subscription {
    "Access to subgraph metadata"
    _meta(block: Block_height): _Meta_
    aggregatorAnswer(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): AggregatorAnswer
    aggregatorAnswers(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: AggregatorAnswer_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: AggregatorAnswer_filter
    ): [AggregatorAnswer!]!
    dailyExchangePartner(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): DailyExchangePartner
    dailyExchangePartners(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: DailyExchangePartner_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: DailyExchangePartner_filter
    ): [DailyExchangePartner!]!
    dailySNXPrice(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): DailySNXPrice
    dailySNXPrices(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: DailySNXPrice_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: DailySNXPrice_filter
    ): [DailySNXPrice!]!
    exchangeEntryAppended(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): ExchangeEntryAppended
    exchangeEntryAppendeds(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: ExchangeEntryAppended_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: ExchangeEntryAppended_filter
    ): [ExchangeEntryAppended!]!
    exchangeEntrySettled(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): ExchangeEntrySettled
    exchangeEntrySettleds(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: ExchangeEntrySettled_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: ExchangeEntrySettled_filter
    ): [ExchangeEntrySettled!]!
    exchangePartner(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): ExchangePartner
    exchangePartners(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: ExchangePartner_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: ExchangePartner_filter
    ): [ExchangePartner!]!
    fifteenMinuteSNXPrice(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): FifteenMinuteSNXPrice
    fifteenMinuteSNXPrices(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: FifteenMinuteSNXPrice_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: FifteenMinuteSNXPrice_filter
    ): [FifteenMinuteSNXPrice!]!
    latestRate(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): LatestRate
    latestRates(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: LatestRate_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: LatestRate_filter
    ): [LatestRate!]!
    rateUpdate(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): RateUpdate
    rateUpdates(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: RateUpdate_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: RateUpdate_filter
    ): [RateUpdate!]!
    ratesUpdated(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): RatesUpdated
    ratesUpdateds(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: RatesUpdated_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: RatesUpdated_filter
    ): [RatesUpdated!]!
    temporaryExchangePartnerTracker(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): TemporaryExchangePartnerTracker
    temporaryExchangePartnerTrackers(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: TemporaryExchangePartnerTracker_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: TemporaryExchangePartnerTracker_filter
    ): [TemporaryExchangePartnerTracker!]!
}

type TemporaryExchangePartnerTracker {
    " Transaction hash of the Exchange event "
    id: ID!
    " String format of the tracking code for a given partner "
    partner: String
    " Total fees from this transaction hash "
    usdFees: BigDecimal
    " Total transaction volume in USD across all ExchangeEntryAppended events in a single tx hash "
    usdVolume: BigDecimal
}

type _Block_ {
    "The hash of the block"
    hash: Bytes
    "The block number"
    number: Int!
}

"The type for the top-level _meta field"
type _Meta_ {
    """

    Information about a specific subgraph block. The hash of the block
    will be null if the _meta field has a block constraint that asks for
    a block number. It will be filled if the _meta field has no block constraint
    and therefore asks for the latest  block
    """
    block: _Block_!
    "The deployment ID"
    deployment: String!
}

enum AggregatorAnswer_orderBy {
    aggregator
    block
    currencyKey
    id
    rate
    roundId
    synth
    timestamp
}

enum DailyExchangePartner_orderBy {
    dayID
    id
    partner
    trades
    usdFees
    usdVolume
}

enum DailySNXPrice_orderBy {
    averagePrice
    count
    id
}

enum ExchangeEntryAppended_orderBy {
    account
    amount
    amountReceived
    dest
    exchangeFeeRate
    id
    roundIdForDest
    roundIdForSrc
    src
}

enum ExchangeEntrySettled_orderBy {
    amount
    dest
    destRoundIdAtPeriodEnd
    exchangeTimestamp
    from
    id
    rebate
    reclaim
    src
    srcRoundIdAtPeriodEnd
}

enum ExchangePartner_orderBy {
    id
    trades
    usdFees
    usdVolume
}

enum FifteenMinuteSNXPrice_orderBy {
    averagePrice
    count
    id
}

enum LatestRate_orderBy {
    id
    rate
}

enum OrderDirection {
    asc
    desc
}

enum RateUpdate_orderBy {
    block
    currencyKey
    id
    rate
    synth
    timestamp
}

enum RatesUpdated_orderBy {
    block
    currencyKeys
    from
    gasPrice
    id
    newRates
    timestamp
}

enum TemporaryExchangePartnerTracker_orderBy {
    id
    partner
    usdFees
    usdVolume
}

input AggregatorAnswer_filter {
    aggregator: Bytes
    aggregator_contains: Bytes
    aggregator_in: [Bytes!]
    aggregator_not: Bytes
    aggregator_not_contains: Bytes
    aggregator_not_in: [Bytes!]
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    currencyKey: Bytes
    currencyKey_contains: Bytes
    currencyKey_in: [Bytes!]
    currencyKey_not: Bytes
    currencyKey_not_contains: Bytes
    currencyKey_not_in: [Bytes!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    rate: BigInt
    rate_gt: BigInt
    rate_gte: BigInt
    rate_in: [BigInt!]
    rate_lt: BigInt
    rate_lte: BigInt
    rate_not: BigInt
    rate_not_in: [BigInt!]
    roundId: BigInt
    roundId_gt: BigInt
    roundId_gte: BigInt
    roundId_in: [BigInt!]
    roundId_lt: BigInt
    roundId_lte: BigInt
    roundId_not: BigInt
    roundId_not_in: [BigInt!]
    synth: String
    synth_contains: String
    synth_ends_with: String
    synth_gt: String
    synth_gte: String
    synth_in: [String!]
    synth_lt: String
    synth_lte: String
    synth_not: String
    synth_not_contains: String
    synth_not_ends_with: String
    synth_not_in: [String!]
    synth_not_starts_with: String
    synth_starts_with: String
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
}

input Block_height {
    hash: Bytes
    number: Int
}

input DailyExchangePartner_filter {
    dayID: String
    dayID_contains: String
    dayID_ends_with: String
    dayID_gt: String
    dayID_gte: String
    dayID_in: [String!]
    dayID_lt: String
    dayID_lte: String
    dayID_not: String
    dayID_not_contains: String
    dayID_not_ends_with: String
    dayID_not_in: [String!]
    dayID_not_starts_with: String
    dayID_starts_with: String
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    partner: String
    partner_contains: String
    partner_ends_with: String
    partner_gt: String
    partner_gte: String
    partner_in: [String!]
    partner_lt: String
    partner_lte: String
    partner_not: String
    partner_not_contains: String
    partner_not_ends_with: String
    partner_not_in: [String!]
    partner_not_starts_with: String
    partner_starts_with: String
    trades: BigInt
    trades_gt: BigInt
    trades_gte: BigInt
    trades_in: [BigInt!]
    trades_lt: BigInt
    trades_lte: BigInt
    trades_not: BigInt
    trades_not_in: [BigInt!]
    usdFees: BigDecimal
    usdFees_gt: BigDecimal
    usdFees_gte: BigDecimal
    usdFees_in: [BigDecimal!]
    usdFees_lt: BigDecimal
    usdFees_lte: BigDecimal
    usdFees_not: BigDecimal
    usdFees_not_in: [BigDecimal!]
    usdVolume: BigDecimal
    usdVolume_gt: BigDecimal
    usdVolume_gte: BigDecimal
    usdVolume_in: [BigDecimal!]
    usdVolume_lt: BigDecimal
    usdVolume_lte: BigDecimal
    usdVolume_not: BigDecimal
    usdVolume_not_in: [BigDecimal!]
}

input DailySNXPrice_filter {
    averagePrice: BigInt
    averagePrice_gt: BigInt
    averagePrice_gte: BigInt
    averagePrice_in: [BigInt!]
    averagePrice_lt: BigInt
    averagePrice_lte: BigInt
    averagePrice_not: BigInt
    averagePrice_not_in: [BigInt!]
    count: BigInt
    count_gt: BigInt
    count_gte: BigInt
    count_in: [BigInt!]
    count_lt: BigInt
    count_lte: BigInt
    count_not: BigInt
    count_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
}

input ExchangeEntryAppended_filter {
    account: Bytes
    account_contains: Bytes
    account_in: [Bytes!]
    account_not: Bytes
    account_not_contains: Bytes
    account_not_in: [Bytes!]
    amount: BigInt
    amountReceived: BigInt
    amountReceived_gt: BigInt
    amountReceived_gte: BigInt
    amountReceived_in: [BigInt!]
    amountReceived_lt: BigInt
    amountReceived_lte: BigInt
    amountReceived_not: BigInt
    amountReceived_not_in: [BigInt!]
    amount_gt: BigInt
    amount_gte: BigInt
    amount_in: [BigInt!]
    amount_lt: BigInt
    amount_lte: BigInt
    amount_not: BigInt
    amount_not_in: [BigInt!]
    dest: Bytes
    dest_contains: Bytes
    dest_in: [Bytes!]
    dest_not: Bytes
    dest_not_contains: Bytes
    dest_not_in: [Bytes!]
    exchangeFeeRate: BigInt
    exchangeFeeRate_gt: BigInt
    exchangeFeeRate_gte: BigInt
    exchangeFeeRate_in: [BigInt!]
    exchangeFeeRate_lt: BigInt
    exchangeFeeRate_lte: BigInt
    exchangeFeeRate_not: BigInt
    exchangeFeeRate_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    roundIdForDest: BigInt
    roundIdForDest_gt: BigInt
    roundIdForDest_gte: BigInt
    roundIdForDest_in: [BigInt!]
    roundIdForDest_lt: BigInt
    roundIdForDest_lte: BigInt
    roundIdForDest_not: BigInt
    roundIdForDest_not_in: [BigInt!]
    roundIdForSrc: BigInt
    roundIdForSrc_gt: BigInt
    roundIdForSrc_gte: BigInt
    roundIdForSrc_in: [BigInt!]
    roundIdForSrc_lt: BigInt
    roundIdForSrc_lte: BigInt
    roundIdForSrc_not: BigInt
    roundIdForSrc_not_in: [BigInt!]
    src: Bytes
    src_contains: Bytes
    src_in: [Bytes!]
    src_not: Bytes
    src_not_contains: Bytes
    src_not_in: [Bytes!]
}

input ExchangeEntrySettled_filter {
    amount: BigInt
    amount_gt: BigInt
    amount_gte: BigInt
    amount_in: [BigInt!]
    amount_lt: BigInt
    amount_lte: BigInt
    amount_not: BigInt
    amount_not_in: [BigInt!]
    dest: Bytes
    destRoundIdAtPeriodEnd: BigInt
    destRoundIdAtPeriodEnd_gt: BigInt
    destRoundIdAtPeriodEnd_gte: BigInt
    destRoundIdAtPeriodEnd_in: [BigInt!]
    destRoundIdAtPeriodEnd_lt: BigInt
    destRoundIdAtPeriodEnd_lte: BigInt
    destRoundIdAtPeriodEnd_not: BigInt
    destRoundIdAtPeriodEnd_not_in: [BigInt!]
    dest_contains: Bytes
    dest_in: [Bytes!]
    dest_not: Bytes
    dest_not_contains: Bytes
    dest_not_in: [Bytes!]
    exchangeTimestamp: BigInt
    exchangeTimestamp_gt: BigInt
    exchangeTimestamp_gte: BigInt
    exchangeTimestamp_in: [BigInt!]
    exchangeTimestamp_lt: BigInt
    exchangeTimestamp_lte: BigInt
    exchangeTimestamp_not: BigInt
    exchangeTimestamp_not_in: [BigInt!]
    from: Bytes
    from_contains: Bytes
    from_in: [Bytes!]
    from_not: Bytes
    from_not_contains: Bytes
    from_not_in: [Bytes!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    rebate: BigInt
    rebate_gt: BigInt
    rebate_gte: BigInt
    rebate_in: [BigInt!]
    rebate_lt: BigInt
    rebate_lte: BigInt
    rebate_not: BigInt
    rebate_not_in: [BigInt!]
    reclaim: BigInt
    reclaim_gt: BigInt
    reclaim_gte: BigInt
    reclaim_in: [BigInt!]
    reclaim_lt: BigInt
    reclaim_lte: BigInt
    reclaim_not: BigInt
    reclaim_not_in: [BigInt!]
    src: Bytes
    srcRoundIdAtPeriodEnd: BigInt
    srcRoundIdAtPeriodEnd_gt: BigInt
    srcRoundIdAtPeriodEnd_gte: BigInt
    srcRoundIdAtPeriodEnd_in: [BigInt!]
    srcRoundIdAtPeriodEnd_lt: BigInt
    srcRoundIdAtPeriodEnd_lte: BigInt
    srcRoundIdAtPeriodEnd_not: BigInt
    srcRoundIdAtPeriodEnd_not_in: [BigInt!]
    src_contains: Bytes
    src_in: [Bytes!]
    src_not: Bytes
    src_not_contains: Bytes
    src_not_in: [Bytes!]
}

input ExchangePartner_filter {
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    trades: BigInt
    trades_gt: BigInt
    trades_gte: BigInt
    trades_in: [BigInt!]
    trades_lt: BigInt
    trades_lte: BigInt
    trades_not: BigInt
    trades_not_in: [BigInt!]
    usdFees: BigDecimal
    usdFees_gt: BigDecimal
    usdFees_gte: BigDecimal
    usdFees_in: [BigDecimal!]
    usdFees_lt: BigDecimal
    usdFees_lte: BigDecimal
    usdFees_not: BigDecimal
    usdFees_not_in: [BigDecimal!]
    usdVolume: BigDecimal
    usdVolume_gt: BigDecimal
    usdVolume_gte: BigDecimal
    usdVolume_in: [BigDecimal!]
    usdVolume_lt: BigDecimal
    usdVolume_lte: BigDecimal
    usdVolume_not: BigDecimal
    usdVolume_not_in: [BigDecimal!]
}

input FifteenMinuteSNXPrice_filter {
    averagePrice: BigInt
    averagePrice_gt: BigInt
    averagePrice_gte: BigInt
    averagePrice_in: [BigInt!]
    averagePrice_lt: BigInt
    averagePrice_lte: BigInt
    averagePrice_not: BigInt
    averagePrice_not_in: [BigInt!]
    count: BigInt
    count_gt: BigInt
    count_gte: BigInt
    count_in: [BigInt!]
    count_lt: BigInt
    count_lte: BigInt
    count_not: BigInt
    count_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
}

input LatestRate_filter {
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    rate: BigInt
    rate_gt: BigInt
    rate_gte: BigInt
    rate_in: [BigInt!]
    rate_lt: BigInt
    rate_lte: BigInt
    rate_not: BigInt
    rate_not_in: [BigInt!]
}

input RateUpdate_filter {
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    currencyKey: Bytes
    currencyKey_contains: Bytes
    currencyKey_in: [Bytes!]
    currencyKey_not: Bytes
    currencyKey_not_contains: Bytes
    currencyKey_not_in: [Bytes!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    rate: BigInt
    rate_gt: BigInt
    rate_gte: BigInt
    rate_in: [BigInt!]
    rate_lt: BigInt
    rate_lte: BigInt
    rate_not: BigInt
    rate_not_in: [BigInt!]
    synth: String
    synth_contains: String
    synth_ends_with: String
    synth_gt: String
    synth_gte: String
    synth_in: [String!]
    synth_lt: String
    synth_lte: String
    synth_not: String
    synth_not_contains: String
    synth_not_ends_with: String
    synth_not_in: [String!]
    synth_not_starts_with: String
    synth_starts_with: String
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
}

input RatesUpdated_filter {
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    currencyKeys: [Bytes!]
    currencyKeys_contains: [Bytes!]
    currencyKeys_not: [Bytes!]
    currencyKeys_not_contains: [Bytes!]
    from: Bytes
    from_contains: Bytes
    from_in: [Bytes!]
    from_not: Bytes
    from_not_contains: Bytes
    from_not_in: [Bytes!]
    gasPrice: BigInt
    gasPrice_gt: BigInt
    gasPrice_gte: BigInt
    gasPrice_in: [BigInt!]
    gasPrice_lt: BigInt
    gasPrice_lte: BigInt
    gasPrice_not: BigInt
    gasPrice_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    newRates: [BigInt!]
    newRates_contains: [BigInt!]
    newRates_not: [BigInt!]
    newRates_not_contains: [BigInt!]
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
}

input TemporaryExchangePartnerTracker_filter {
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    partner: String
    partner_contains: String
    partner_ends_with: String
    partner_gt: String
    partner_gte: String
    partner_in: [String!]
    partner_lt: String
    partner_lte: String
    partner_not: String
    partner_not_contains: String
    partner_not_ends_with: String
    partner_not_in: [String!]
    partner_not_starts_with: String
    partner_starts_with: String
    usdFees: BigDecimal
    usdFees_gt: BigDecimal
    usdFees_gte: BigDecimal
    usdFees_in: [BigDecimal!]
    usdFees_lt: BigDecimal
    usdFees_lte: BigDecimal
    usdFees_not: BigDecimal
    usdFees_not_in: [BigDecimal!]
    usdVolume: BigDecimal
    usdVolume_gt: BigDecimal
    usdVolume_gte: BigDecimal
    usdVolume_in: [BigDecimal!]
    usdVolume_lt: BigDecimal
    usdVolume_lte: BigDecimal
    usdVolume_not: BigDecimal
    usdVolume_not_in: [BigDecimal!]
}


scalar BigDecimal

scalar BigInt

scalar Bytes
